/** @define Figure */

.Figure {
  --Figure-img-max-height: calc(100vh - var(--height-caption-header));

  margin: 0;
}

.Figure-imagecontainer {
  position: fixed;
  display: flex;
  width: 100%;
  height: var(--Figure-img-max-height);
  align-items: center;
  justify-content: center;
}

.Figure-img {
  /* 
  With CSS Values and Units Level 4, something like the following formula could be used to offset the image
  bottom: clamp(0, calc(50% + ((100vw / (100vh - var(--height-caption-header) * 2)) - (var(--image-width) / var(--image-height))) * 50%), var(--height-caption-header));

  Explanation:
  (100vw / (100vh - var(--height-caption-header) * 2) calculates the aspect ratio of the viewport with the title bar subtracted from top and bottom
  (var(--image-width) / var(--image-height)) calculates the aspect ratio of the image
  The difference between the two is the offset needed to allow the image to occupy the maximum height and preferably center vertically
  The result is then clamped between 0 and the height of the title bar, to at max offset the image will be at the top of the viewport
  */
  width: 100%;
  height: auto;
  max-height: var(--Figure-img-max-height);
  aspect-ratio: var(--image-width) / var(--image-height);
  object-fit: contain;
}

.Figure-captioncontainer {
  position: fixed;
  z-index: 1;
  width: 100%;
  height: 100%;
  padding-top: var(--Figure-img-max-height);
  overflow-y: scroll;
}

.Figure-captioncontent {
  display: flex;
  width: 100%;
  flex-direction: column;
  align-items: center;
  border-top: 1px solid var(--color-bg);
  background: var(--color-bg-transparent);
}

.Figure-caption {
  display: flex;
  width: 100%;

  /* The max width could also be tied to the images max width with better calculations */
  max-width: 1200px;
  flex-direction: column;
  padding: 0 var(--spacing-l) var(--spacing-xxl);
  gap: var(--spacing-s);
}

.Figure-captionHeader {
  display: flex;
  min-height: var(--height-caption-header);
  flex-flow: row wrap;
  align-items: center;
  justify-content: space-between;
  padding: var(--spacing-s) 0;
  gap: var(--spacing-s) var(--spacing-l);
}

.Figure-aside {
  display: flex;
  flex-direction: row;
  align-items: center;
  margin-top: 4px;
  color: var(--color-text-secondary);
}

/* stylelint-disable-next-line plugin/selector-bem-pattern */
.Figure-aside * ~ *::before {
  border-left: 1px solid var(--color-text-secondary);
  margin: var(--spacing-s);
  content: "";
}
