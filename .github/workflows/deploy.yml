name: Build Hugo site

on:
  workflow_call:
    inputs:
      deploy-path:
        required: true
        type: string
        description: 'Used as /home/<user>/<deploy-path>, where <user> is fetched from a secret'
      base-url:
        required: true
        type: string
      build-flags:
        required: false
        type: string
        description: 'Flags to pass to Hugo CLI'

env:
  DEPLOY_PATH: ${{ inputs.deploy-path }}
  BASE_URL: ${{ inputs.base-url }}
  BUILD_FLAGS: ${{ inputs.build-flags }}

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.127.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb     
     
      - name: Install Dart Sass
        run: sudo snap install dart-sass

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            ${{ env.BUILD_FLAGS }} \
            --gc \
            --minify \
            --baseURL "${{ env.BASE_URL }}/"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./public

  # Deployment job
  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        path: ./public
    
    - name: Create a temp files for SSH key and known hosts
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_HOST_FINGERPRINT: ${{ secrets.SSH_HOST_FINGERPRINT }}
      run: |
        echo "::add-mask::$SSH_PRIVATE_KEY"
        echo "::add-mask::$SSH_HOST_FINGERPRINT"
        echo "$SSH_PRIVATE_KEY" > $RUNNER_TEMP/private_key
        echo "$SSH_HOST_FINGERPRINT" > $RUNNER_TEMP/known_hosts
        chmod 600 $RUNNER_TEMP/private_key
      
    - name: 'Deploy to VPS via SCP'
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        DEPLOY_PATH: ${{ env.DEPLOY_PATH }}
      run: |
        scp -r -i $RUNNER_TEMP/private_key -o UserKnownHostsFile=$RUNNER_TEMP/known_hosts ./public/artifact/* $SSH_USER@$SSH_HOST:/home/$SSH_USER/$DEPLOY_PATH